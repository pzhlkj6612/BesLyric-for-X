name: macos
on:
  push:
    paths-ignore:
      - "LICENSE"
      - "README.md"
      - "version.txt"
      - ".github/workflows/windows*.yml"
      - ".github/workflows/linux*.yml"
  pull_request:
    paths-ignore:
      - "LICENSE"
      - "README.md"
      - "version.txt"
      - ".github/workflows/windows*.yml"
      - ".github/workflows/linux*.yml"
  workflow_dispatch:

jobs:
  build_package_upload:
    timeout-minutes: 60
    env:
      APP_NAME: BesLyric-for-X

      MAKE_INSTALL_DIR_PATH: ${{ github.workspace }}/${{ github.run_id }}/build
      PACKAGE_DIR_PATH: ${{ github.workspace }}/${{ github.run_id }}/package

    runs-on: macos-10.15
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      matrix:
        xcode_ver: [11.7] # Only one!
        qt_ver: [5.15.2]
        experimental: [false]
    steps:
      - name: What time?
        id: my_luminous_watch
        uses: 1466587594/get-current-time@v2
        with:
          format: "YYYYMMDDHHmmss"

      # Fetch all history for all tags and branches.
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Fetch macOS submodules
        if: ${{ runner.os == 'macOS' }}
        run: git submodule update --init --depth=1 --recursive -- .deploy-package/macOS
      - name: Fetch Linux submodules
        if: ${{ runner.os == 'Linux' }}
        run: git submodule update --init --depth=1 --recursive -- .deploy-package/Linux
      - name: Fetch Windows submodules
        if: ${{ runner.os == 'Windows' }}
        run: git submodule update --init --depth=1 --recursive -- .deploy-package/Windows

      - name: Get commit SHA1 and version number from git
        id: getGitInfo
        run: |
          set -o pipefail

          gitCommitSha1=$(git rev-parse HEAD)
          versionNumber=$(git describe --tags --abbrev=0 | \
            egrep --only-matching '\d+\.\d+\.\d+')

          echo "gitCommitSha1 = ${gitCommitSha1}"
          echo "versionNumber = ${versionNumber}"

          echo "::set-output name=gitCommitSha1::${gitCommitSha1}"
          echo "::set-output name=versionNumber::${versionNumber}"

      - name: Create directories
        run: |
          mkdir -p '${{ env.MAKE_INSTALL_DIR_PATH }}'
          mkdir -p '${{ env.PACKAGE_DIR_PATH }}'

      # Choose the latest supported SDK
      #   https://doc.qt.io/qt-5/macos.html#supported-versions
      #   https://github.com/actions/virtual-environments/blob/main/images/macos/macos-10.15-Readme.md#xcode
      - name: Use Xcode Command Line Tools ${{ matrix.xcode_ver }}
        run: |
          xcode-select --print-path
          clang++ -v

          sudo xcode-select --switch '/Applications/Xcode_${{ matrix.xcode_ver }}.app'
          xcode-select --print-path
          clang++ -v

      - run: brew install sdl2 ffmpeg pkg-config

      - name: Cache Qt
        id: cache_qt
        uses: actions/cache@v1
        with:
          path: ${{ github.workspace }}/../Qt
          key: QtCache-macos-10.15-${{ matrix.qt_ver }}

      - name: Install Qt
        uses: jurplel/install-qt-action@v2.13.0
        with:
          version: ${{ matrix.qt_ver }}
          target: desktop
          cached: ${{ steps.cache_qt.outputs.cache-hit }}

      - name: Find Qt 5
        if: ${{ startsWith(matrix.qt_ver, '5') }}
        run: |
          echo 'Qt5_DIR = ${{ env.Qt5_DIR }}'
          echo 'Qt_DIR=${{ env.Qt5_DIR }}' >> ${GITHUB_ENV}

      - name: Find Qt 6
        if: ${{ startsWith(matrix.qt_ver, '6') }}
        run: |
          echo 'Qt6_DIR = ${{ env.Qt6_DIR }}'
          echo 'Qt_DIR=${{ env.Qt6_DIR }}' >> ${GITHUB_ENV}

      - name: Configure Qt env
        run: |
          echo '${{ env.Qt_DIR }}/bin' >> ${GITHUB_PATH}

      - name: Test Qt & env
        run: |
          echo ${PATH}

          which 'qmake'

          qmake '-query'

      - name: Build ${{ steps.getGitInfo.outputs.versionNumber }}+${{ steps.getGitInfo.outputs.gitCommitSha1 }}
        run: |
          [[ -f '.qmake.stash' ]] && rm '.qmake.stash'

          qmake \
            '-makefile' \
            '-o' 'Makefile' \
            '-spec' 'macx-clang' \
            '-before' \
            'CONFIG*=force_debug_info' \
            'CONFIG*=separate_debug_info' \
            'GIT_COMMIT_SHA1=${{ steps.getGitInfo.outputs.gitCommitSha1 }}' \
            'APP_VERSION=${{ steps.getGitInfo.outputs.versionNumber }}' \
            '-after' \
            'TARGET=${{ env.APP_NAME }}' \
            'CONFIG+=release' \
            '${{ github.workspace }}'

          # nproc is not a command on Mac · Issue #33 · memkind/memkind
          #   https://github.com/memkind/memkind/issues/33#issuecomment-540614162
          make -j$(sysctl -n hw.logicalcpu)

          make install INSTALL_ROOT='${{ env.MAKE_INSTALL_DIR_PATH }}'

          du -ach '${{ env.MAKE_INSTALL_DIR_PATH }}'

      - name: Prepare for deployment and packaging
        run: |
          brew install imagemagick create-dmg

      - name: Deploy and package
        run: |
          pushd '${{ env.PACKAGE_DIR_PATH }}'

          MACDEPLOYQT_PATH='macdeployqt' \
          APP_FILE_PATH='${{ env.MAKE_INSTALL_DIR_PATH }}/${{ env.APP_NAME }}.app' \
            bash '${{ github.workspace }}/.deploy-package/macOS/macdeployqt_enhanced.sh'

          APP_FILE_PATH='${{ env.MAKE_INSTALL_DIR_PATH }}/${{ env.APP_NAME }}.app' \
          OUTPUT_DMG_PATH='${{ env.PACKAGE_DIR_PATH }}/${{ env.APP_NAME }}_${{ steps.getGitInfo.outputs.versionNumber }}_legacy.dmg' \
            bash '${{ github.workspace }}/.deploy-package/macOS/package_hdiutil.sh'

          IMAGEMAGICK_PATH='magick' \
          CREATE_DMG_PATH='create-dmg' \
          APP_FILE_PATH='${{ env.MAKE_INSTALL_DIR_PATH }}/${{ env.APP_NAME }}.app' \
          ICON_FILE_PATH='${{ env.MAKE_INSTALL_DIR_PATH }}/BesLyric.icns' \
          OUTPUT_DMG_PATH='${{ env.PACKAGE_DIR_PATH }}/${{ env.APP_NAME }}_${{ steps.getGitInfo.outputs.versionNumber }}.dmg' \
            bash '${{ github.workspace }}/.deploy-package/macOS/package_cdmg.sh'

          popd

      - name: Upload legacy dmg
        uses: actions/upload-artifact@v2
        with:
          if-no-files-found: error
          name: "${{ steps.my_luminous_watch.outputs.formattedTime }}-macOS-${{ matrix.qt_ver }}-legacy_dmg"
          path: "${{ env.PACKAGE_DIR_PATH }}/${{ env.APP_NAME }}_${{ steps.getGitInfo.outputs.versionNumber }}_legacy.dmg"

      - name: Upload dmg
        uses: actions/upload-artifact@v2
        with:
          if-no-files-found: error
          name: "${{ steps.my_luminous_watch.outputs.formattedTime }}-macOS-${{ matrix.qt_ver }}-dmg"
          path: "${{ env.PACKAGE_DIR_PATH }}/${{ env.APP_NAME }}_${{ steps.getGitInfo.outputs.versionNumber }}.dmg"

      - name: Upload debug info
        uses: actions/upload-artifact@v2
        with:
          if-no-files-found: error
          name: "${{ steps.my_luminous_watch.outputs.formattedTime }}-macOS-${{ matrix.qt_ver }}-dSYM"
          path: "${{ env.MAKE_INSTALL_DIR_PATH }}/${{ env.APP_NAME }}.app.dSYM"
