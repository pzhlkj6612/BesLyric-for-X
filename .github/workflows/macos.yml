name: macos
on:
  push:
    paths-ignore:
      - "LICENSE"
      - "README.md"
      - "version.txt"
      - ".github/workflows/windows*.yml"
      - ".github/workflows/linux*.yml"
  pull_request:
    paths-ignore:
      - "LICENSE"
      - "README.md"
      - "version.txt"
      - ".github/workflows/windows*.yml"
      - ".github/workflows/linux*.yml"
  workflow_dispatch:

jobs:
  build_package_upload:
    timeout-minutes: 60
    env:
      APP_NAME: BesLyric-for-X

      MAKE_INSTALL_DIR_PATH: ${{ github.workspace }}/${{ github.run_id }}/build
      PACKAGE_DIR_PATH: ${{ github.workspace }}/${{ github.run_id }}/package

    runs-on: macos-11
    continue-on-error: false
    strategy:
      matrix:
        xcode_ver: [11.7] # Only one!
        qt_ver: [5.15.2]
    steps:
      - name: What time?
        id: my_luminous_watch
        uses: josStorer/get-current-time@v2.0.2
        with:
          format: "YYYYMMDDHHmmss"

      # TODO: Don't fetch all history for all tags and branches.
      - uses: actions/checkout@v3.2.0
        with:
          fetch-depth: 0

      - name: Fetch macOS submodules
        if: ${{ runner.os == 'macOS' }}
        run: git submodule update --init --depth=1 --recursive -- .deploy-package/macOS
      - name: Fetch Linux submodules
        if: ${{ runner.os == 'Linux' }}
        run: git submodule update --init --depth=1 --recursive -- .deploy-package/Linux
      - name: Fetch Windows submodules
        if: ${{ runner.os == 'Windows' }}
        run: git submodule update --init --depth=1 --recursive -- .deploy-package/Windows

      # TODO: use GHA stuff, don't write those code.
      - name: Get commit SHA1 and version number from git
        id: getGitInfo
        run: |
          set -o pipefail

          gitCommitSha1=$(git rev-parse HEAD)
          versionNumber=$(git describe --tags --abbrev=0 | \
            egrep --only-matching '\d+\.\d+\.\d+')

          echo "gitCommitSha1 = ${gitCommitSha1}"
          echo "versionNumber = ${versionNumber}"

          echo "gitCommitSha1=${gitCommitSha1}" >>$GITHUB_OUTPUT
          echo "versionNumber=${versionNumber}" >>$GITHUB_OUTPUT

      - name: Create directories
        run: |
          mkdir -p '${{ env.MAKE_INSTALL_DIR_PATH }}'
          mkdir -p '${{ env.PACKAGE_DIR_PATH }}'

      # Choose the latest supported SDK
      #   https://doc.qt.io/qt-5/macos.html#supported-versions
      #   https://github.com/actions/runner-images/blob/main/images/macos/macos-11-Readme.md#xcode
      - name: Use Xcode Command Line Tools ${{ matrix.xcode_ver }}
        run: |
          xcode-select --print-path
          clang++ -v

          sudo xcode-select --switch '/Applications/Xcode_${{ matrix.xcode_ver }}.app'
          xcode-select --print-path
          clang++ -v

      - name: brew install 3rd party libs
        id: brew3rdLibs
        run: |
          brew install sdl2 ffmpeg@4

          sdl2_path_link="$(brew --prefix --installed sdl2)"
          sdl2_path="$(dirname ${sdl2_path_link})/$(readlink ${sdl2_path_link})"

          ffmpeg_path_link="$(brew --prefix --installed ffmpeg@4)"
          ffmpeg_path="$(dirname ${ffmpeg_path_link})/$(readlink ${ffmpeg_path_link})"

          echo "dirPath_ffmpeg=${ffmpeg_path}" >>$GITHUB_OUTPUT
          echo "dirPath_sdl2=${sdl2_path}" >>$GITHUB_OUTPUT

      - name: Install Qt
        uses: jurplel/install-qt-action@v3.0.0
        with:
          version: ${{ matrix.qt_ver }}
          target: desktop
          cache: true

      - name: Find Qt 5
        if: ${{ startsWith(matrix.qt_ver, '5') }}
        run: |
          echo 'Qt5_DIR = ${{ env.Qt5_DIR }}'
          echo 'Qt_DIR=${{ env.Qt5_DIR }}' >>$GITHUB_ENV

      - name: Find Qt 6
        if: ${{ startsWith(matrix.qt_ver, '6') }}
        run: |
          echo 'Qt6_DIR = ${{ env.Qt6_DIR }}'
          echo 'Qt_DIR=${{ env.Qt6_DIR }}' >>$GITHUB_ENV

      - name: Configure Qt env
        run: |
          echo '${{ env.Qt_DIR }}/bin' >>$GITHUB_PATH

      - name: Test Qt & env
        run: |
          echo ${PATH}

          which 'cmake'

          cmake '--version'

      - name: Build ${{ steps.getGitInfo.outputs.versionNumber }}+${{ steps.getGitInfo.outputs.gitCommitSha1 }}
        run: |
          cmake \
            -D 'CMAKE_BUILD_TYPE=RelWithDebInfo' \
            -D 'CMAKE_PREFIX_PATH=${{ env.Qt_DIR }};${{ steps.brew3rdLibs.outputs.dirPath_ffmpeg }};${{ steps.brew3rdLibs.outputs.dirPath_sdl2 }}' \
            -D 'CMAKE_INSTALL_PREFIX=${{ env.MAKE_INSTALL_DIR_PATH }}' \
            -D 'GIT_COMMIT_SHA1=${{ steps.getGitInfo.outputs.gitCommitSha1 }}' \
            -D 'APP_VERSION=${{ steps.getGitInfo.outputs.versionNumber }}' \
            -S '${{ github.workspace }}' \
            -B '${{ github.workspace }}/build'

          # nproc is not a command on Mac · Issue #33 · memkind/memkind
          #   https://github.com/memkind/memkind/issues/33#issuecomment-540614162
          cmake \
            --build '${{ github.workspace }}/build' \
            -j $(sysctl -n hw.logicalcpu) \
            --target install
          
          echo '--------------/build---------------'

          find '${{ github.workspace }}/build'
          
          echo '------------MAKE_INSTALL_DIR_PATH-------------'

          du -ach '${{ env.MAKE_INSTALL_DIR_PATH }}'

      - name: Prepare for deployment and packaging
        run: |
          brew install imagemagick create-dmg

      - name: Deploy and package
        run: |
          pushd '${{ env.PACKAGE_DIR_PATH }}'

          MACDEPLOYQT_PATH='macdeployqt' \
          APP_FILE_PATH='${{ env.MAKE_INSTALL_DIR_PATH }}/${{ env.APP_NAME }}.app' \
            bash '${{ github.workspace }}/.deploy-package/macOS/macdeployqt_enhanced.sh'

          APP_FILE_PATH='${{ env.MAKE_INSTALL_DIR_PATH }}/${{ env.APP_NAME }}.app' \
          OUTPUT_DMG_PATH='${{ env.PACKAGE_DIR_PATH }}/${{ env.APP_NAME }}_${{ steps.getGitInfo.outputs.versionNumber }}_legacy.dmg' \
            bash '${{ github.workspace }}/.deploy-package/macOS/package_hdiutil.sh'

          IMAGEMAGICK_PATH='magick' \
          CREATE_DMG_PATH='create-dmg' \
          APP_FILE_PATH='${{ env.MAKE_INSTALL_DIR_PATH }}/${{ env.APP_NAME }}.app' \
          ICON_FILE_PATH='${{ env.MAKE_INSTALL_DIR_PATH }}/BesLyric.icns' \
          OUTPUT_DMG_PATH='${{ env.PACKAGE_DIR_PATH }}/${{ env.APP_NAME }}_${{ steps.getGitInfo.outputs.versionNumber }}.dmg' \
            bash '${{ github.workspace }}/.deploy-package/macOS/package_cdmg.sh'

          popd

      - name: Upload legacy dmg
        uses: actions/upload-artifact@v3.1.1
        with:
          if-no-files-found: error
          name: "${{ steps.my_luminous_watch.outputs.formattedTime }}-macOS-${{ matrix.qt_ver }}-legacy_dmg"
          path: "${{ env.PACKAGE_DIR_PATH }}/${{ env.APP_NAME }}_${{ steps.getGitInfo.outputs.versionNumber }}_legacy.dmg"

      - name: Upload dmg
        uses: actions/upload-artifact@v3.1.1
        with:
          if-no-files-found: error
          name: "${{ steps.my_luminous_watch.outputs.formattedTime }}-macOS-${{ matrix.qt_ver }}-dmg"
          path: "${{ env.PACKAGE_DIR_PATH }}/${{ env.APP_NAME }}_${{ steps.getGitInfo.outputs.versionNumber }}.dmg"
